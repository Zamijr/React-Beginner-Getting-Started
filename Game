const Stars = (props) => {
  	return(
    	<div className="col-5">
        { _.range(props.numberOfStars).map((number,i)=>
        	<i key={i} className="fa fa-star"></i>
        )}
      </div>
    );
}
const Button = (props) => {
	let button;
  
  switch(props.answerIsCorrect){
  	case true:
    	button = <button className="btn btn-sucess" >
        <i className="fa fa-check"></i>
      </button>;
    	break;
    case false:
    	button = <button className="btn btn-danger" >
        <i className="fa fa-times"></i>
      </button>;
    	break;
    default:
    	button = <button
          disabled= {props.selectedNumbers.length === 0 }
        >=</button>;
    	break;
  }
  	return(
    	<div className="col-2">
    	  {button}
      </div>
    );
}
const Answer = (props) => {
  	return(
    	<div className="col-5">
        {props.selectedNumbers.map((number,i)=>
        	<span key={i}
                onClick={()=>props.unSelectNumber(number)}
          >{number}</span>
        )}
        
      </div>
    );
}

const Numbers = (props) =>{
	const numberClassName = (number) =>{
  	if(props.selectedNumbers.indexOf(number) >= 0){
    	return 'selected';
    }
  }
	return(
  	<div className="card text-center">
      <div>
        { Numbers.list.map((number,i)=>
        	<span key={i} className={numberClassName(number)}
                onClick={ () => props.selectNumber(number)}>
          {number}</span>
        )}
      </div>
    </div>
  );
}
Numbers.list = _.range(1,10);

class Game extends React.Component{
	state = {
  	selectedNumbers: [],
    numberOfStars: 1 + Math.floor(Math.random() * 9),
    answerIsCorrect: null
  }
  
  selectNumber = (clickedNumber) => {
  	if(this.state.selectedNumbers.indexOf(clickedNumber) >= 0){return;}
  	this.setState(prevState =>({
    	selectedNumbers:  prevState.selectedNumbers.concat(clickedNumber)
    }));
  }
  
  unSelectNumber = (clickedNumber)=> {
  	this.setState( prevState=> ({
    	selectedNumbers: prevState.selectedNumbers.filter( number=> number!=clickedNumber)
    }));
  }
  
  checkAnswer = ()=>{
  	this.setState(prevState=> ({
    	answerIsCorrect: prevState.numberOfStars ===
      	prevState.selectedNumbers.reduce((acc,n)=>acc + n , 0 )
    }));
  }
	render(){
  	return(
    	<div className="container">
        <h3>Play Nine</h3>
        <hr/>
        <div className="row">
    	    <Stars numberOfStars = {this.state.numberOfStars}/>
          <Button selectedNumbers={this.state.selectedNumbers} 
                  checkAnswer = {this.checkAnswer}
                  answerIsCorrect = {this.state.answerIsCorrect}
                  />
          <Answer selectedNumbers={this.state.selectedNumbers}
                  unSelectNumber={this.unSelectNumber}
                  />
        </div>
        <br />
        <Numbers selectedNumbers={this.state.selectedNumbers}
                 selectNumber= {this.selectNumber}/>
      </div>
    );
  };

}

class App extends React.Component{
	render(){
  	return(
    	<Game />
    );
  };

}

ReactDOM.render(<App />,mountNode)



//CSS

#mountNode {
  color: #000;
}

.fa-star{
  margin: 0.5em;
  font-size: 24px;
}

span{
  display: inline-block;
  margin: 0.5em;
  text-align:center;
  background-color: #ccc;
  width: 24px;
  border-radius: 50%;
  cursor: pointer;
}

.selected{
  background-color: #eee;
  color: #ddd;
  cursor: not-allowed;
}

.used{
  background-color: #aaddaa;
  color: #99bb99;
  cursor: not-allowed;
}